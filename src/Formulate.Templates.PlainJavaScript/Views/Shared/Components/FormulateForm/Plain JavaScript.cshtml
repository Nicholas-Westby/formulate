@inject Formulate.Templates.PlainJavaScript.IBuildPlainJavaScriptJson buildJson;
@model Formulate.Core.RenderModels.ConfiguredFormRenderModel
@{
    var randomFormId = Guid.NewGuid().ToString("N");
    var json = buildJson.Build(Model, randomFormId);

    if (string.IsNullOrWhiteSpace(json))
    {
        return;
    }
}
@* Render element to attach form meta data to, such as form name. *@

<div class="formulate-wrapper">
<div style="display: none;" data-form-name="@Model.Form.Name"></div>

</div>
<!-- Attach an ID to the script to act as a placeholder for the form. -->
<script id="formulate-form-@(randomFormId)">
    (function() {

        // Variables.
        let formData, key;

        // Get the form data into JavaScript.
        formData = @Html.Raw(json);

        // Store the form data to an array on the window object.
        // Once the JavaScript loads, it will create this form based
        // on the data in this window object.
        key = "formulate-plain-js-forms";
        window[key] = window[key] || [];
        window[key].push(formData);

    })();
</script>