namespace Formulate.BackOffice.Definitions.Forms
{
    using Formulate.Core.Forms;
    using Formulate.Core.Layouts;
    using Formulate.Core.Layouts.Basic;
    using Formulate.Core.Utilities;
    using System;
    using System.Collections.Generic;

    public sealed class FormWithBasicLayoutDefinition : FormDefinition
    {
        private readonly ILayoutEntityRepository _layoutEntityRepository;

        private readonly IJsonUtility _jsonUtility;

        public FormWithBasicLayoutDefinition(ILayoutEntityRepository layoutEntityRepository, IJsonUtility jsonUtility)
        {
            _layoutEntityRepository = layoutEntityRepository;
            _jsonUtility = jsonUtility;
        }

        public override Guid KindId => new Guid("3A11BD580AC643D78F632F88E7C132AF");

        public override int SortOrder => 0;

        public override string Name => "Form with Basic Layout";

        public override string Description => "Creates a form with a preconfigured form layout. This can be changed later on.";

        public override void PostSave(PersistedForm form)
        {
            var layoutName = $"{form.Name} (Autogenerated)";
            var layoutId = Guid.NewGuid();
            var layoutPath = new List<Guid>(form.Path);
            layoutPath.Add(layoutId);

            var config = new BasicLayoutConfiguration()
            {
                AutoPopulate = true
            };

            var layout = new PersistedLayout()
            {
                Id = layoutId,
                Path = layoutPath.ToArray(),
                KindId = Guid.Parse(BasicLayoutDefinition.Constants.KindId),
                TemplateId = Guid.Parse("F3FB1485C1D14806B4190D7ABDE39530"), // replace with config value.
                Name = layoutName,
                Data = _jsonUtility.Serialize(config)
            };

            _layoutEntityRepository.Save(layout);
        }
    }
}
